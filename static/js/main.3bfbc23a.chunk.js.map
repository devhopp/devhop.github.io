{"version":3,"sources":["logo.svg","components/Reloj.js","components/Selector.js","components/Contenedor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Reloj","_ref","zona","react_default","a","createElement","react","ReactFitText_default","compressor","lib_default","format","ticking","interval","timezone","Selector","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","etiqueta","zonas","value","label","onSelect","bind","assertThisInitialized","language","setState","react_select_browser_esm","onChange","placeholder","className","options","labelKey","valueKey","components_Reloj","Component","Contenedor","components_Selector","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCczBC,EAVD,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACVC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAcI,WAAY,IACtBL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAOM,OAAO,WAAWC,SAAS,EAAMC,SAAU,IAAMC,SAAUX,gBC2CnEY,cA9CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAS,sBACTX,SAAS,sBACTY,MAAM,CACF,CAACC,MAAQ,iBAAiBC,MAAQ,aAClC,CAACD,MAAQ,oBAAoBC,MAAQ,aACrC,CAACD,MAAQ,mBAAmBC,MAAQ,YACpC,CAACD,MAAQ,sBAAsBC,MAAQ,uBACvC,CAACD,MAAQ,qBAAqBC,MAAQ,cACtC,CAACD,MAAQ,mBAAmBC,MAAQ,eACpC,CAACD,MAAQ,iBAAiBC,MAAQ,aAClC,CAACD,MAAQ,oBAAoBC,MAAQ,aACrC,CAACD,MAAQ,sBAAsBC,MAAQ,eACvC,CAACD,MAAQ,kBAAkBC,MAAQ,aAG3CX,EAAKY,SAAWZ,EAAKY,SAASC,KAAdZ,OAAAa,EAAA,EAAAb,CAAAD,IAlBDA,wEAqBVe,GACLZ,KAAKa,SAAS,CACVR,SAASO,EAASJ,MAClBd,SAASkB,EAASL,yCAIjB,IACED,EAASN,KAAKI,MAAdE,MAEP,OACItB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACIP,MAAO,CAACC,MAAOR,KAAKI,MAAMC,SAAUE,MAAOP,KAAKI,MAAMV,UACtDqB,SAAUf,KAAKS,SACfO,YAAY,yBACZC,UAAU,aACVC,QAASZ,EAAOa,SAAS,QAAQC,SAAS,UAE9CpC,EAAAC,EAAAC,cAAA,KAAG+B,UAAU,YAAb,mBAAyCjB,KAAKI,MAAMC,UACpDrB,EAAAC,EAAAC,cAACmC,EAAD,CAAOtC,KAAMiB,KAAKI,MAAMV,SAAUyB,SAAS,QAAQC,SAAS,kBA1CrDE,aCYRC,EAXI,kBACfvC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cAChBjC,EAAAC,EAAAC,cAACsC,EAAD,wBCKOC,MARf,WACE,OACEzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWN,MCInBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3bfbc23a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from 'react';\r\nimport ReactFitText from 'react-fittext';\r\nimport Clock from 'react-live-clock';\r\n\r\nconst Reloj = ({zona}) => (\r\n    <Fragment>\r\n        <ReactFitText compressor={0.4}>\r\n            <h1>\r\n                <Clock format=\"HH:mm:ss\" ticking={true} interval={1000} timezone={zona} />\r\n            </h1>\r\n        </ReactFitText>\r\n    </Fragment>\r\n);\r\n\r\nexport default Reloj;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Reloj from './Reloj';\r\nimport Select from 'react-select';\r\n \r\nclass Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            etiqueta:'Ciudad de México',\r\n            timezone:'America/Mexico_City',\r\n            zonas:[\r\n                {\"value\":\"America/Cancun\",\"label\":\"Cancún\"},\r\n                {\"value\":\"America/Chihuahua\",\"label\":\"Chihuahua\"},\r\n                {\"value\":\"America/Ensenada\",\"label\":\"Ensenada\"},\r\n                {\"value\":\"America/Mexico_City\",\"label\":\"Ciudad de México\"},\r\n                {\"value\":\"America/Hermosillo\",\"label\":\"Hermosillo\"},\r\n                {\"value\":\"America/Mazatlan\",\"label\":\"Mazatlán\"},\r\n                {\"value\":\"America/Merida\",\"label\":\"Mérida\"},\r\n                {\"value\":\"America/Monterrey\",\"label\":\"Monterrey\"},\r\n                {\"value\":\"America/Tegucigalpa\",\"label\":\"Tegucigalpa\"},\r\n                {\"value\":\"America/Tijuana\",\"label\":\"Tijuana\"}\r\n            ]\r\n        }\r\n        this.onSelect = this.onSelect.bind(this);\r\n    }\r\n\r\n    onSelect(language) {\r\n        this.setState({\r\n            etiqueta:language.label,\r\n            timezone:language.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {zonas} = this.state;\r\n\r\n        return(\r\n            <Fragment>\r\n                <Select\r\n                    value={{label: this.state.etiqueta, value: this.state.timezone}}\r\n                    onChange={this.onSelect}\r\n                    placeholder=\"Seleccione Timezone...\"\r\n                    className=\"selectForm\"\r\n                    options={zonas} labelKey=\"label\" valueKey=\"value\">\r\n                </Select>\r\n                <p className=\"App-link\">Hora Actual en: {this.state.etiqueta}</p>\r\n                <Reloj zona={this.state.timezone} labelKey=\"label\" valueKey=\"value\" />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Selector;\r\n","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport Selector from './Selector';\r\n\r\n\r\nconst Contenedor = () => (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Selector />\r\n        {/*\r\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        */}\r\n      </header>\r\n    </div>\r\n);\r\n\r\nexport default Contenedor;\r\n","import React from 'react';\nimport './App.css';\nimport Contenedor from './components/Contenedor';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path=\"/app/PE\" component={Contenedor}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}